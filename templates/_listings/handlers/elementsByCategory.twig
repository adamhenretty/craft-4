{# ======================================
`extends` logic map...
_listing.twig (routing handler)
	-> _listings/handlers/elementsByCategory.twig (elements handler)
		-> _listings/blog.twig (listing type handler for unique listing layout and any per-type customisation)
			-> _listings/default.twig (shared listing layout - header/hero/metadata/pagination etc)
				-> _layout.twig (site layout)

The purpose of this handler template is ultimately to
decide which elements to fetch for the listing.

Listings can list entries, categories, or assets.
(though it would be a bit inception-y for this template to
handle categories).

We are extending an individual template for
each listing type (e.g. _listings/blog.twig) to
give us the flexibility to make per-type
tweaks and keep all that logic in the same place,
whilst retaining this common handler logic
between all of the types.

route_listing and route_cat are required
params, and are set in routes.php. This is
so that categories are not tied to a single
CP-defined URI format, increasing reusability
of categories (i.e., you could have both
/blog/category/something and /case-studies/category/something
using the exact same cat).
========================================= #}

{% set _listing = route_listing is defined ? route_listing : craft.app.request.getSegment(1) %}

{% extends '_listings/' ~ _listing|camel %}

{# =============================================================================== #}

{% switch _listing %}
	{% case 'downloads' %}
		{% set elementType = 'assets' %}
		{% set eagerLoad = [] %}
	{% case 'products' %}
		{% set elementType = 'entries' %}
		{% set eagerLoad = ['productImgs','installedProductImg'] %}
	{% default %}
		{% set elementType = 'entries' %}
		{% set eagerLoad = [] %}
{% endswitch %}

{# when using routes.php to route here instead of a CP-defined Category URI Format,
Craft won't automatically populate a `category` variable, so we need to set it ourselves...#}
{% set category = category ?? craft.categories.slug(route_cat).one() %}
{#{% set noIndexOverride = 1 %}#}

{% set theLimit = 12 %}

{% switch elementType %}
	{% case 'assets' %}
		{# remember, don't call .all() on this ElementCriteriaModel object as it needs to be
		passed into the paginate tag which will work it all out - https://docs.craftcms.com/v3/dev/tags/paginate.html #}
		{% set theStuff = craft.assets.volume('downloads').relatedTo(category).with(eagerLoad).limit(theLimit) %}
		{# these ids are used to ensure we only output cats that have entries. See categoryButtons.twig #}
		{% set theStuffIds = craft.assets.volume('downloads').ids() %}
	{% case 'entries' %}
		{% set theStuff = craft.entries.section(_listing).relatedTo(category).with(eagerLoad).limit(theLimit) %}
		{% set theStuffIds = craft.entries.section(_listing).ids() %}
{% endswitch %}

{# set the main `pageEntries` and `pageInfo` vars #}
{% paginate theStuff as pageInfo, pageEntries %}

{% set withPagination = theStuffIds|length < theLimit ? false : true %}